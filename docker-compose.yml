version: '3'

services:
  neo4j:
    image: neo4j:latest
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
    environment:
      - NEO4J_AUTH=neo4j/password123
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
    networks:
      - app-network
    healthcheck:
      test: wget -O /dev/null -q http://localhost:7474 || exit 1
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 15s
      
  postgres:
    image: postgres:latest
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
      - POSTGRES_DB=app_db
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
      
  pgadmin:
    image: dpage/pgadmin4:latest
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_SERVER_JSON_FILE=/pgadmin4/servers.json
    volumes:
      - pgadmin-data:/var/lib/pgadmin
      - ./pgadmin/servers/servers.json:/pgadmin4/servers.json
      - ./pgadmin/pgpass:/pgpass
    command: >
      /bin/bash -c "
      chmod 600 /pgpass &&
      /entrypoint.sh
      "
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  fastapi:
    build: .
    ports:
      - "8000:8000"
    depends_on:
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password123
      - POSTGRES_URI=postgresql://postgres:postgres123@postgres:5432/app_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
      - POSTGRES_DB=app_db
    networks:
      - app-network
    volumes:
      - .:/app
      - ./static:/app/static
      - ./templates:/app/templates

  # prometheus:
  #   image: prom/prometheus:v2.45.0
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus:/etc/prometheus
  #     - prometheus-data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #   networks:
  #     - app-network
  #   restart: unless-stopped

  # postgres-exporter:
  #   image: prometheuscommunity/postgres-exporter:v0.10.0
  #   ports:
  #     - "9187:9187"
  #   environment:
  #     - DATA_SOURCE_NAME=postgresql://postgres:postgres123@postgres:5432/app_db?sslmode=disable
  #     - PG_EXPORTER_DISABLE_DEFAULT_METRICS=true
  #     - PG_EXPORTER_DISABLE_SETTINGS_METRICS=true
  #     - PG_EXPORTER_EXTEND_QUERY_PATH=/etc/postgres_exporter/queries.yaml
  #   volumes:
  #     - ./postgres_exporter:/etc/postgres_exporter
  #   networks:
  #     - app-network
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  neo4j-data:
  neo4j-logs:
  postgres-data:
  pgadmin-data:
  # prometheus-data:
